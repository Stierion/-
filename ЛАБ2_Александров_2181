% Параметры сигнала:
U1 = 10;
U2 = 20;
U3 = 30;
U4 = 40;
T1 =(pi);
T2 =(2*pi);

Td = pi/20;
Fd = 1/Td;

x = []; % массив со значениями отссчетами сигнала
s = []; % массив со значениями функции самого сигнала в точках



t1 = [0:Td:T1]; % диапазон по времени первой прямой
u1 = ((U2 - U1)/T1)*(t1) + U1; % значения функции первой прямой

t2 = [T1:Td:T2]; % диапазон по времени второй прямой
u2 = ((U4 - U3)/T1)*(t2) + U2; % значения функции второй прямой
u2 = [u2,0] % добавление нулевого значения функции

s = [u1 u2] % создание массива с координатами функции s(t)
t = [0:Td:T1,T1:Td:T2,T2] % создание массива с координатами t функции S(t)


% Построим график:
figure('Name', 'Построение графика сигнала:')
    plot(t,s)
    title('График дискретного сигнала')
     xlabel('t')
     ylabel('S(t)')
     xlim([0,7])
     ylim([0,50])

% Зададим коэффициенты фильтра:
a0 = 1;
a1 = 0.8
a2 = 0.6;
a3 = 0.4;
a4 = 0.2;

b0 = 0.2;
b1 = 0.4;
b2 = 0.1;
b3 = 0.8;
b4 = -1;

% Вектор значений отсчетов:
s_zeros = [s, zeros(1, length(s))];


% Прямая форма реализации дискретного фильтра

out_signal_s = filter(b, a, s_zeros); % значения выходного сигнала фильтра

% Вектора коэффициентов:
a = [a0, a1, a2, a3, a4]; 
b = [b0, b1, b2, b3, b4];

% Максимальное по модулю значение сигналов:
max_ampl_s = max(abs(out_signal_s))

% Каноничная форма реализации дискретного фильтра

out_signal_c = filter(b, a, s_zeros); % значения выходного сигнала фильтра

% Вектора коэффициентов:
a = [a0, a1, a2, a3, a4];
b = [1, 0, 0, 0, 0];

% Максимальное по модулю значение полученного сигнала:
max_ampl_c = max(abs(out_signal_c))

% Транспонированная форма реализации дискретного фильтра

% Вектора коэффициентов:
a = [a0, a1, a2, a3, a4];
b = [b0, b1, b2, b3, b4];

out_signal_t = []; % значения выходного сигнала фильтра

states = [] % вектор внутренних состояний 
tek_sost = [] % вектор текущих состояний 

% Цикл, в котором пропускаются отдельные счеты сигнала:
for (k = 1:length(s_zeros))
    [out_signal_t(k), tek_sost] = filter(b, a, s_zeros(k), tek_sost);
    states = [states tek_sost];
end;

% Максимальное по модулю значение внутреннего состояния,:
max_ampl_t = max(abs(states')) 
max_ampl_t = max(abs(max_ampl_t))

% Построим графики полученных выходных сигналов:
figure ('Name','Графики функций выходного сигнала: ')
subplot(2,2,1)
    stem(out_signal_s);
    title('Прямая форма реализации дискретного фильтра:')
    ylabel('Значения сигнала')
subplot(2,2,2)
    stem(out_signal_c)
    title('Каноничная форма реализации дискретного фильтра: ')
    ylabel('Значения сигнала')
subplot(2,2,3)
    plot(states')
    title('Транспонированная форма реализации дискретного фильтра: ')
    ylabel('Значения сигнала')

% Разложим функцию передачи фильтра на простые дроби с помощью функции
% residuez:
[vichety, poluses, koeff_per] = residuez(b,a);

% Посчитаем амплитуды и фазы полученных полюсов и вычетов:

modules_v = abs(vichety);
phases_v = angle(vichety); 

modules_p = abs(poluses);
phases_p = angle(poluses);

% Выведем результаты:
fprintf('Результаты эксперимента: \n')

fprintf('Максимальное по модулю значение сигналов (Прямая форма): %s \n', max_ampl_s);
fprintf('Максимальное по модулю значение сигналов (Каноничная форма): %s \n', max_ampl_c);
fprintf('Максимальное по модулю значение внутреннего состояния (Транспонированная форма): %s \n', max_ampl_t)

fprintf('Значения модулей вычетов:\n')
disp(modules_v)
fprintf('Значения фаз вычетов: \n')
disp(phases_v)
fprintf('Значения модулей полюсов: \n')
disp(modules_p)
fprintf('Значения фаз полюсов: \n')
disp(phases_p)
fprintf('Значение целой части функции передачи: %s \n', koeff_per)
