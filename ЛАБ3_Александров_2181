clear, clc, close all
% Параметры сигнала:
U1 = 10;
U2 = 20;
U3 = 30;
U4 = 40;
T1 =(pi);
T2 =(2*pi);

Td = pi/20;
Fd = 1/Td;


s = []; % массив со значениями функции самого сигнала в точках



t1 = [0:Td:T1]; % диапазон по времени первой прямой
u1 = ((U2 - U1)/T1)*(t1) + U1; % значения функции первой прямой

t2 = [T1:Td:T2]; % диапазон по времени второй прямой
u2 = ((U4 - U3)/T1)*(t2) + U2; % значения функции второй прямой
u2 = [u2,0] % добавление нулевого значения функции

s = [u1 u2] % создание массива с координатами функции s(t)
t = [0:Td:T1,T1:Td:T2,T2] % создание массива с координатами t функции S(t)

% Построим график:
figure('Name', 'Построение графика сигнала:')
    plot(t,s), grid on;
    title('График дискретного сигнала')
     xlabel('t')
     ylabel('S(t)')
     xlim([0,7])
     ylim([0,50])

% Вычислим ДПФ для дискретного сигнала:
DPF = fft(s)

N = length(t) % длина вектора временной области сигнала

DPF_a = abs(DPF) % функция модуля спектральных отсчетов
DPF_f = angle(DPF) * 180/pi% функция модуля спектральных отсчетов (в градусах)

% Нормируем:
DPF_an = 2*DPF_a/N;
f = (0:N-1)*Fd/N; % нормированная частота

% Построим графики:
figure ("Name",'Построение графиков спектральных отсчетов')
    subplot(2,1,1)
    stem(f,DPF_an),grid on
    title('График модулей спектральных отсчетов')
    xlabel("Частота")
    ylabel("Амплитуда")
    subplot(2,1,2)
    stem(f,DPF_f), grid on;
    title('График фаз спектральных отсчетов')
    xlabel("Частота")
    ylabel("Фаза")


% Оценка ширины спектра сигнала
% Рассчитаем энергию исходного сигнала:
E0 = 0
for k=1:N
    E0 = E0 + abs(s(k))^2;
end;

% Обнулим отсчеты вектора ДПФ в его копии:
DPF_copy = DPF;    
Nmax = 0;    

DPF_copy(Nmax+2:length(DPF_copy)- Nmax) = 0; 

% Получим фукнцию обратного ДПФ:
obr_DPF = ifft(DPF_copy)
%Вычислим энергию получившегося сигнала:
E0_obr = 0
for k=1:N
    E0_obr = E0_obr + abs(DPF_copy(k))^2; 
end;

% Построим графики исходного сигнала и обратного ДПФ:
figure,
    stem(t, obr_DPF, 'r'), grid on
    hold on 
    stem(t,s, 'b')
    hold off
    xlabel('t')
    ylabel('S(t)')
    xlim([0,7])
    ylim([0,50])
    legend('Обратное ДПФ','Исходный сигнал')

% Дополнение нулями:
s_zeros = [s, zeros(1, length(s))];


% Вычислим ДПФ для дискретного сигнала:
DPF = fft(s_zeros)

N = 2*length(t) % длина вектора временной области сигнала

DPF_a = abs(DPF) % функция модуля спектральных отсчетов
DPF_f = angle(DPF) * 180/pi% функция модуля спектральных отсчетов (в градусах)

% Нормируем:
DPF_an = 2*DPF_a/N;
f = (0:N-1)*Fd/N; % нормированная частота

% Построим графики:
figure ("Name",'Построение графиков спектральных отсчетов с дополненными нулями')
    subplot(2,1,1)
    stem(f,DPF_an),grid on
    title('График модулей спектральных отсчетов')
    xlabel("Частота")
    ylabel("Амплитуда")
    subplot(2,1,2)
    stem(f,DPF_f), grid on;
    title('График фаз спектральных отсчетов')
    xlabel("Частота")
    ylabel("Фаза")

%  Измерение скорости расчетов при вычислении ДПФ непосредственно по теоретической формуле.

N = 8192;   % размер ДПФ
x1 = [s zeros(1, N-length(s))]; % дополнение сигнала нулями до длины N 
D = dftmtx(N);   % матрица ДПФ 
y = zeros(1, N); % массив для результатов ДПФ 
tic              
% старт таймера 
for k = 1:11  % цикл для измерения времени (подбираем число повторений К)
y = x1 * D;  % вычисление ДПФ по прямой формуле 
end 
toc              
% отображение измеренного времени

% Сделаем измерения:
%   N = 64   K = 200000
%   N = 128  K = 50000
%   N = 256  K = 12500
%   N = 512  K = 3000
%   N = 1024 K = 600
%   N = 2048 K = 170
%   N = 4096 K = 45 
%   N = 8192 K = 11

% Измерение скорости расчетов при вычислении ДПФ с использованием быстрого алгоритма.
N = 64; % размер ДПФ 
y = zeros(1, N);   % массив для результатов ДПФ 
tic                
% старт таймера 
for k = 1:1000000*1.1 % цикл для измерения времени 
y = fft(s,N); % вычисление БПФ 
end 
toc                
% отображение измеренного времени

% Сделаем измерения:
%   N = 64   K = 1100000
%   N = 128  K = 1050000
%   N = 256  K = 750000
%   N = 512  K = 570000
%   N = 1024 K = 180000
%   N = 2048 K = 115000
%   N = 4096 K = 60000
%   N = 8192 K = 25000
